#include<iostream>
using namespace std;
#include<string>
#define MAX 1000

//设计联系人结构体
struct Person
{
	string my_name;//姓名 
	int my_sex;//性别 1.男 2.女
	int my_age;//年龄
	string my_phone;//电话
	string my_addr;//住址
};

//设计通讯录结构体
struct Addressbooks
{
	Person personArray[MAX];//通讯录中保存的联系人数组
	int my_size;//通讯录中当前记录联系人个数
};

//1、添加联系人
void addPerson(Addressbooks* abs)
{
	//判断通讯录是否已满，如果满了就不再添加。
	if (abs->my_size == MAX)
	{
		cout << "通讯录已满，无法添加！" << endl;
	}
	else
	{
		//姓名
		string name;
		cout << "请输入姓名：" << endl;
		cin >> name;
		abs->personArray[abs->my_size].my_name = name;

		//性别
		cout << "请输入性别：" << endl;
		cout << "1――男" << endl;
		cout << "2――女" << endl;
		int sex = 0;
		while (true)
		{
			cin >> sex;
			if (sex == 1 || sex == 2)
			{
				abs->personArray[abs->my_size].my_sex = sex;
				break;
			}
			cout << "输入有误，请重新输入" << endl;
		}

		//年龄
		cout << "请输入年龄：" << endl;
		int age = 0;
		cin >> age;
		abs->personArray[abs->my_size].my_age = age;

		//电话
		cout << "请输入联系电话：" << endl;
		string phone;
		cin >> phone;
		abs->personArray[abs->my_size].my_phone = phone;

		//住址
		cout << "请输入家庭住址：" << endl;
		string address;
		cin >> address;
		abs->personArray[abs->my_size].my_addr = address;

		//更新通讯录人数
		abs->my_size++;

		cout << "添加成功" << endl;

		system("pause");//请按任意键继续
		system("cls");//清屏操作
	}

}

//2、显示所有联系人
void showPerson(Addressbooks* abs)
{
	//判断通讯录人数是否为0，若为0则提示记录为空，若不为0则显示记录的联系人信息
	if (abs->my_size == 0)
	{
		cout << "当前记录为空！" << endl;
	}
	else
	{
		for (int i = 0; i < abs->my_size; i++)
		{
			cout << "姓名：" << abs->personArray[i].my_name << "\t";
			cout << "性别：" << (abs->personArray[i].my_sex==1?"男":"女") << "\t";
			cout << "年龄：" << abs->personArray[i].my_age << "\t";
			cout << "电话：" << abs->personArray[i].my_phone << "\t";
			cout << "住址：" << abs->personArray[i].my_addr << endl;
		}
	}

	system("pause");
	system("cls");
}

//检测联系人是否存在，存在则返回所在数组中的位置，不存在则返回-1。
int isExist(Addressbooks* abs, string name)
{
	for (int i = 0; i < abs->my_size; i++)
	{
		if(abs->personArray[i].my_name==name)
		{
			return i;
		}
	}
	return -1;
}

//3、删除指定联系人
void deletePerson(Addressbooks* abs)
{
	cout << "请输入你要删除的联系人" << endl;
	string name;
	cin >> name;

	int ret = isExist(abs, name);
	if (ret != -1)
	{
		for (int i = ret; i < abs->my_size; i++)
		{
			abs->personArray[i] = abs->personArray[i + 1];
		}
		abs->my_size--;
		cout << "删除成功" << endl;
	}
	else
	{
		cout << "查无此人！" << endl;
	}
	system("pause");
	system("cls");
}

//4、查找指定联系人信息
void findPerson(Addressbooks* abs)
{
	cout << "请输入您要查找的联系人：" << endl;
	string name;
	cin >> name;
	
	//判断联系人是否在通讯录中
	int ret = isExist(abs, name);
	if (ret != -1)
	{
		cout << "姓名：" << abs->personArray[ret].my_name << "\t";
		cout << "性别：" << abs->personArray[ret].my_sex << "\t";
		cout << "年龄：" << abs->personArray[ret].my_age << "\t";
		cout << "电话：" << abs->personArray[ret].my_phone << "\t";
		cout << "住址：" << abs->personArray[ret].my_addr << endl;
	}
	else
	{
		cout << "查无此人！" << endl;
	}
	system("pause");
	system("cls");
}

//5、修改指定联系人信息
void modifyPerson(Addressbooks* abs)
{
	cout << "请输入您要修改的联系人" << endl;
	string name;
	cin >> name;

	int ret = isExist(abs, name);

	if (ret != -1)
	{
		//姓名
		string name;
		cout << "请输入姓名：" << endl;
		cin >> name;
		abs->personArray[ret].my_name = name;
		//性别
		cout << "请输入性别：" << endl;
		cout << "1―男" << endl;
		cout << "2―女" << endl;
		int sex = 0;
		while (true)
		{
			cin >> sex;
			if (sex == 1 || sex == 2)
			{
				abs->personArray[ret].my_sex = sex;
				break;
			}
			cout << "输入有误，请重新输入" << endl;
		}
		//年龄
		cout << "请输入年龄：" << endl;
		int age = 0;
		cin >> age;
		abs->personArray[ret].my_age = age;
		//电话
		cout << "请输入联系电话：" << endl;
		string phone;
		cin >> phone;
		abs->personArray[ret].my_phone = phone;
		//住址
		cout << "请输入家庭住址：" << endl;
		string address;
		cin >> address;
		abs->personArray[ret].my_addr = address;

		cout << "修改成功" << endl;
	}
	else
	{
		cout << "查无此人！" << endl;
	}
	system("pause");
	system("cls");
}

//6、清空所有联系人
void cleanPerson(Addressbooks* abs)
{
	abs->my_size = 0;
	cout << "通讯录已清空" << endl;
	system("pause");
	system("cls");
}



// 菜单界面
void showMenu()
{
	cout << "1、添加联系人" << endl;
	cout << "2、显示联系人" << endl;
	cout << "3、删除联系人" << endl;
	cout << "4、查找联系人" << endl;
	cout << "5、修改联系人" << endl;
	cout << "6、清空联系人" << endl;
	cout << "0、退出通讯录" << endl;
}

int main()
{
	//创建通讯录结构体变量
	Addressbooks abs;
	//初始化通讯录中当前人员个数
	abs.my_size = 0;

	int select = 0;
    //菜单调用
	while(true)
	{
		showMenu();  
		cin >> select;
		switch (select)
		{
		case 1://1、添加联系人
			addPerson(&abs);//利用地址传递，可以修改实参。
			break;
		case 2://2、显示联系人
			showPerson(&abs);
			break;
		case 3://3、删除联系人
			deletePerson(&abs);
			break;
		case 4://4、查找联系人
			findPerson(&abs);
			break;
		case 5://5、修改联系人
			modifyPerson(&abs);
			break;
		case 6://6、清空联系人
			cleanPerson(&abs);
			break;
		case 0://0、退出通讯录
			cout << "欢迎下次使用" << endl;
			//system("pause");
			return 0;
			break; 
		}
	}
}