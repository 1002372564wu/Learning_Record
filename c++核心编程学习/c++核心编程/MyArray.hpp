#pragma once
#include<iostream>
using namespace std;

template<class T>
class MyArray
{
public:
	//有参构造
	MyArray(int capacity)
	{
		//cout << "有参构造的调用" << endl;
		this->m_Capcity = capacity;
		this->m_Size = 0;
		this->pAddress = new T[this->m_Capcity];
	}

	//拷贝构造
	MyArray(const MyArray& arr)
	{
		//cout << "拷贝构造的调用" << endl;
		this->m_Capcity = arr.m_Capcity;
		this->m_Size = arr.m_Size;
		//this->pAddress = arr.pAddress; 浅拷贝问题：会导致堆区内存重复释放

		//深拷贝
		this->pAddress = new T[arr.m_Capcity];
		//将arr中的数据都拷贝过来
		for (int i = 0; i < this->m_Size; i++)
		{
			this->pAddress[i] = arr.pAddress[i];
		}
	}

	//operator= 防止浅拷贝问题
	MyArray& operator=(const MyArray& arr)
	{
		//cout << "operator=的调用" << endl;
		//先判断原来堆区是否有数据，如果有先释放
		if (this->pAddress != NULL)
		{
			delete[] this->pAddress;
			this->pAddress = NULL;
			this->m_Capcity = 0;
			this->m_Size = 0;
		}
		//深拷贝
		this->m_Capcity = arr.m_Capcity;
		this->m_Size = arr.m_Size;
		this->pAddress = new T(arr.m_Capcity);
		for (int i = 0; i < this->m_Size; i++)
		{
			this->pAddress[i] = arr.pAddress[i];
		}
		return *this;
	}

	//尾插法
	void push_back(const T& val)
	{
		//判断容量是否等于大小了
		if (this->m_Capcity == this->m_Size)
		{
			return;
		}
		this->pAddress[this->m_Size] = val;//在数组末尾插入数据
		this->m_Size++;//更新数组大小
	}

	//尾删法
	void pop_back()
	{
		//让用户访问不到最后一个元素，即为尾删，逻辑删除
		if (this->m_Size == 0)
		{
			return;
		}
		this->m_Size--;
	}

	//通过下标方式访问数组中的元素
	T& operator[](int index) //如果要将返回值作为左值(赋值)，需要返回引用
	{
		return this->pAddress[index];
	}

	//返回数组容量
	int getcapacity()
	{
		return this->m_Capcity;
	}

	//返回数组大小
	int getsize()
	{
		return this->m_Size;
	}

	//析构函数
	~MyArray()
	{
		if (this->pAddress != NULL)
		{
			//cout << "析构的调用" << endl;
			delete[] this->pAddress;
			this->pAddress = NULL;
		}
	}

private:
	T* pAddress;//指针指向堆区开辟的真实数组

	int m_Capcity;//数组容量

	int m_Size;//数组大小
};